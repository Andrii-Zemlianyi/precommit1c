#Использовать asserts
#Использовать logos

Перем путьPrecommit;
Перем путьИнсталятора;

Процедура ОповеститьПользователя(_сообщение)
    
    Сообщить(_сообщение); //TODO - переделать на logos
    
КонецПроцедуры

Функция ВКавычки(_слово)
    Возврат """" + _слово + """";
КонецФункции

Функция СоздатьСсылку(_куда, _откуда)
    
    _адресОткуда = ОбъединитьПути(путьИнсталятора, _откуда);
    _д = Новый Файл(_адресОткуда);
    Если _д.ЭтоКаталог() Тогда
        создаватель = "mklink /J"    
    Иначе
        создаватель = "mklink"
    КонецЕсли;
   
   _создательСсылки = "cmd /C " + ВКавычки(создаватель + " " + ВКавычки(_куда) + " " + ВКавычки(_адресОткуда));
  
    Сообщить(_создательСсылки);
      
    //mklink скотина виртуализированная команда в составе cmd
    _процессКоманды = СоздатьПроцесс(_создательСсылки, ,Истина, Истина);
    _процессКоманды.Запустить();
    _процессКоманды.ОжидатьЗавершения();
    
    Возврат "ОК";
    
КонецФункции

_инфо = ТекущийСценарий();

путьИнсталятора = _инфо.Каталог;

путьPrecommit = ОбъединитьПути(путьИнсталятора, "v8files-extractor.os");

КоммуникацияСПользователем = Новый Консоль;

КоммуникацияСПользователем.ВывестиСтроку("Интерактивный инсталятор precommit в указанный каталог с внешними обработками 1С");
КоммуникацияСПользователем.ВывестиСтроку("Введите полный адрес каталога с вашим git репозиторием:
|");

Ответ = КоммуникацияСПользователем.ПрочитатьСтроку();

ОповеститьПользователя("Проверка возможности установки в каталог " + Ответ);
_дескрипиторКаталога = Новый Файл(ответ);
Ожидаем.Что(_дескрипиторКаталога.Существует()).ЭтоИстина();
ОповеститьПользователя("Каталог " + Ответ + " существует - ОК
|");

путьКСкрытомуКаталогу = ОбъединитьПути(Ответ,".git");
_дексрипторСкрытогоКаталогаGIT = Новый Файл(путьКСкрытомуКаталогу); 

ОповеститьПользователя("Проверка наличия сервисного каталога .GIT (или файла .git) " + Ответ);

Если _дексрипторСкрытогоКаталогаGIT.Существует() Тогда
    ОповеститьПользователя("Сервисный каталог .GIT " + путьКСкрытомуКаталогу + " существует - ОК
    |");    
Иначе
    _процессКоманды = СоздатьПроцесс("git init", Ответ ,Истина, Истина);
    _процессКоманды.Запустить();
    _процессКоманды.ОжидатьЗавершения();
    ОповеститьПользователя("Указанный каталог не находился под управлением git - произведена инициализация INFO");
КонецЕсли;

ОповеститьПользователя("Вызов спец.команды - обновления подмодулей precommit1C, про которую все забывают");
_процессКоманды = СоздатьПроцесс("git submodule update --init --recursive", ТекущийКаталог() ,Истина, Истина);
_процессКоманды.Запустить();
_процессКоманды.ОжидатьЗавершения();
ОповеститьПользователя("Подмодули обновлены - ОК");

путьККаталогуПерехватов = ОбъединитьПути(Ответ,".git","hooks");
_дескриптовКаталогаПерехвата = Новый Файл(путьКСкрытомуКаталогу); 

ОповеститьПользователя("Проверка наличия сервисного каталога hooks - " + Ответ);
Если _дескриптовКаталогаПерехвата.Существует() Тогда
    ОповеститьПользователя("Сервисный каталог hooks " + путьККаталогуПерехватов + " существует - ОК
    |");
Иначе
    ОповеститьПользователя("Создан сервисный каталог " + путьККаталогуПерехватов);
    СоздатьКаталог(путьККаталогуПерехватов);
КонецЕсли;

ОповеститьПользователя("
|Создание ссылок через mklink (символические ссылки - добро пожаловать в мир магии):
|   ibSerice - сервисная база - " + СоздатьСсылку(
  ОбъединитьПути(Ответ,".git","hooks","ibService"),"ibService"  
) + "
|   tools\v8unpack - работа с бинарными форматами 1С " + СоздатьСсылку(
  ОбъединитьПути(Ответ,".git","hooks","tools"),"tools"  
) + "
|   v8reader - читатель форм 1С " + СоздатьСсылку(
  ОбъединитьПути(Ответ,".git","hooks","v8reader"),"v8reader"  
) + "
|   v8files-extractor - скрипт распаковки " + СоздатьСсылку(
  ОбъединитьПути(Ответ,".git","hooks","v8files-extractor.os"),"v8files-extractor.os"  
) + " 
|   pre-commit - скрипт для git (точка входа) " + СоздатьСсылку(
  ОбъединитьПути(Ответ,".git","hooks","pre-commit"),"pre-commit"  
) + " 
|");

v8unpackАдрес = ОбъединитьПути(путьИнсталятора, "tools", "v8unpack.exe");
кудаСкопировать = ОбъединитьПути(КаталогПрограммы(),"v8unpack.exe");
КопироватьФайл(v8unpackАдрес, кудаСкопировать);
ОповеститьПользователя("Установка v8unpack в oscript/bin - ОК");

ОповеститьПользователя("Вызов спец команды - поддержка русских имен в каталогах git");
_процессКоманды = СоздатьПроцесс("git config --global core.quotepath false", Ответ ,Истина, Истина);
_процессКоманды.Запустить();
_процессКоманды.ОжидатьЗавершения();
ОповеститьПользователя("Применена настройка поддержки русских имён - ОК");

ПодключитьСценарий(путьPrecommit, "Распаковщик");
_текущийРаспаковщик = Новый Распаковщик;

ОповеститьПользователя("Контроль версии помещенной в hooks через служебный файл");
_текстСлужебногоФайла = Новый ЗаписьТекста();
_текстСлужебногоФайла.Открыть(ОбъединитьПути(ответ, ".precommit1C"));
_текстСлужебногоФайла.Записать(_текущийРаспаковщик.Версия());
_текстСлужебногоФайла.Закрыть();
ОповеститьПользователя("Версия precommit1C зафиксирована в служебном файле - ОК");

ОповеститьПользователя("
|Инсталяция в каталог " + Ответ + " завершена
| версия precommit1C = " + _текущийРаспаковщик.Версия() + "
| дата актуальности - " + ТекущаяДата());

ОповеститьПользователя("Приятного помещения в GIT !!!");
